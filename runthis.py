# -*- coding: utf-8 -*-

# Form implementation generated from reading ui file 'final.ui'
#
# Created by: PyQt5 UI code generator 5.15.4
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.
import csv
import os
import re
from datetime import datetime, timedelta

import pandas as pd
from PyQt5 import QtCore, QtGui, QtWidgets
from PyQt5.QtWidgets import QFileDialog,QLineEdit
from tkinter import messagebox
import tkinter as tk

class Ui_MainWindow(object):
    def done(self):
        try:
            folder_path = self.lineEdit.text()
            print(folder_path)
            os.chdir(folder_path)
            # Get a list of CSV files in the folder
            csv_files = [file for file in os.listdir(folder_path) if file.endswith('.csv')]
            target = self.lineEdit_3.text()
            print(target)

            delete = str(self.lineEdit_2.text())
            print(delete)
            # delete_date=datetime.strptime(delete, '%Y-%m-%d-%H:%M')
            # print(delete_date)
            print(type(delete))

            target_date = datetime.strptime(target, '%Y-%m-%d-%H:%M')
            # Iterate over each CSV file
            for csv_file in csv_files:
                target_prefixes=("yarb13","yarb37","yarb39","yarb68","yarb92")
                if(csv_file.startswith(tuple(target_prefixes)) ):
                    continue
                print(csv_file)
                # Delete data from  files
                df = pd.read_csv(csv_file)
                print(df)
                print("5")
                df['Time'] = df['Time'].fillna('')
                print(6)

                # Find the index of the first occurrence that contains '20:22' in the Time column
                # delete=self.lineEdit_2.text()
                search_data = df[df['Time'].str.contains(delete)]

                print(search_data)
                if (len(search_data) == 0):
                    print("this word not found")
                else:

                    idx = search_data.index[0]
                    print(idx)

                    # Delete rows starting from the identified index
                    df = df.iloc[:idx]

                    # Write the modified DataFrame back to a CSV file
                    df.to_csv(csv_file, index=False)

                ####################################################################
                # when excel stop add data (target_date =======>> is last date in excel sheet)

                # Read the CSV file into a list of dictionaries
                data = []
                with open(csv_file, 'r') as file:
                    reader = csv.DictReader(file)
                    for row in reader:
                        data.append(row)

                # Get the column names
                columns = data[0].keys()
                c = list(columns)

                # Get the index of the columns
                time_column_index = list(columns).index(c[0])
                data_column_index = list(columns).index(c[1])

                # Get the last row's data
                last_row = data[-1]

                # Parse the last time value
                last_time = datetime.strptime(last_row[c[0]], '%Y-%m-%d-%H:%M')
                i = 1
                while last_time < target_date:
                    # Add 15 minutes to the last time value
                    new_time = last_time + timedelta(minutes=15)

                    # Create a new row with updated time and data from previous rows
                    new_row = {
                        c[0]: new_time.strftime('%Y-%m-%d-%H:%M'),
                        c[1]: data[i][c[1]] if last_row[c[1]] else data[i][c[1]]
                    }

                    # Append the new row to the data list
                    data.append(new_row)

                    # Write the updated data back to the CSV file
                    with open(csv_file, 'w', newline='') as file:
                        writer = csv.DictWriter(file, fieldnames=columns)
                        writer.writeheader()
                        writer.writerows(data)

                    last_row = data[-1]

                    # Parse the last time value
                    last_time = datetime.strptime(last_row[c[0]], '%Y-%m-%d-%H:%M')

                    i += 1
            window = tk.Tk()
            window.withdraw()

            # Show a dialog message
            messagebox.showinfo("Information", "Your Data done")

            # Run the Tkinter event loop
            window.mainloop()



        except Exception as e:
            print(type(e).__name__);
            # self.label_4.setText("Please Enter Data in right format .")
            # self.lineEdit.clear()
            # self.lineEdit_2.clear()
            # self.lineEdit_3.clear()
            # Create a Tkinter window



    def select_folder(self, event):
        #The QFileDialog.getExistingDirectory method displays a dialog box that allows the user to select an existing directory/folder in the file system. The first argument specifies the parent widget for the dialog. By passing None, you're indicating that there is no specific parent widget for the dialog, and it will be displayed as a top-level window.

        #If you have a reference to a parent widget, such as a QMainWindow, you can pass it as the first argument instead of None. This will make the dialog modal to the parent widget, meaning that the user won't be able to interact with the parent widget until the dialog is closed.
        folder_path = QFileDialog.getExistingDirectory(None, "Select Folder")
        if folder_path:
            self.lineEdit.setText(folder_path)

        # Call the base class implementation to handle the event
        QtWidgets.QLineEdit.mousePressEvent(self.lineEdit, event)
    def setupUi(self, MainWindow):
        MainWindow.setObjectName("MainWindow")
        MainWindow.resize(638, 559)
        MainWindow.setStyleSheet("background-image: url(360_F_329925521_OM2c0uYMzjBFVhT1iII8g8SD5KVesga6.jpg);\n"
"")
        self.centralwidget = QtWidgets.QWidget(MainWindow)
        self.centralwidget.setObjectName("centralwidget")
        self.label = QtWidgets.QLabel(self.centralwidget)
        self.label.setGeometry(QtCore.QRect(20, 10, 311, 41))
        self.label.setStyleSheet("color: rgb(0, 0, 0);\n"
"font: 75 22pt \"MS Shell Dlg 2\";")
        self.label.setObjectName("label")


        self.lineEdit = QtWidgets.QLineEdit(self.centralwidget)
        self.lineEdit.setGeometry(QtCore.QRect(200, 170, 311, 31))
        self.lineEdit.setObjectName("lineEdit")
        self.lineEdit.setPlaceholderText("Please choose your folder")
        self.lineEdit.setReadOnly(True)
        self.lineEdit.mousePressEvent = self.select_folder
        self.pushButton = QtWidgets.QPushButton(self.centralwidget)
        self.pushButton.setGeometry(QtCore.QRect(250, 490, 121, 41))
        self.pushButton.setStyleSheet(
            "background-color: qlineargradient(spread:pad, x1:0, y1:0, x2:1, y2:0, stop:0 rgba(102, 255, 158, 255), stop:0.55 rgba(61, 235, 147, 255), stop:0.98 rgba(0, 0, 0, 255), stop:1 rgba(0, 0, 0, 0));\n"
            "color: rgb(0, 85, 0);\n"
            "font: 75 18pt \"MS Shell Dlg 2\";\n"
            "background-color: rgb(0, 170, 0);")
        self.pushButton.setObjectName("pushButton")
        self.pushButton.clicked.connect(self.done)
        self.label_3 = QtWidgets.QLabel(self.centralwidget)
        self.label_3.setGeometry(QtCore.QRect(10, 260, 191, 31))
        self.label_3.setStyleSheet("color: rgb(0, 104, 0);\n"
"background-image: url(download-fotor-bg-remover-20230917103011.png);\n"
"font: 75 20pt \"MS Shell Dlg 2\";")
        self.label_3.setObjectName("label_3")
        self.label_5 = QtWidgets.QLabel(self.centralwidget)
        self.label_5.setGeometry(QtCore.QRect(10, 170, 191, 31))
        self.label_5.setStyleSheet("color: rgb(0, 104, 0);\n"
"background-image: url(download-fotor-bg-remover-20230917103011.png);\n"
"font: 75 20pt \"MS Shell Dlg 2\";")
        self.label_5.setObjectName("label_5")
        self.label_6 = QtWidgets.QLabel(self.centralwidget)
        self.label_6.setGeometry(QtCore.QRect(10, 340, 191, 31))
        self.label_6.setStyleSheet("color: rgb(0, 104, 0);\n"
"background-image: url(download-fotor-bg-remover-20230917103011.png);\n"
"font: 75 20pt \"MS Shell Dlg 2\";")
        self.label_6.setObjectName("label_6")
        self.lineEdit_2 = QtWidgets.QLineEdit(self.centralwidget)
        self.lineEdit_2.setGeometry(QtCore.QRect(200, 250, 311, 31))
        self.lineEdit_2.setObjectName("lineEdit_2")
        self.lineEdit_2.setPlaceholderText("Please write data in this format yyyy-mm-dd")
        self.lineEdit_3 = QtWidgets.QLineEdit(self.centralwidget)
        self.lineEdit_3.setGeometry(QtCore.QRect(200, 340, 311, 31))
        self.lineEdit_3.setObjectName("lineEdit_3")
        self.lineEdit_3.setPlaceholderText("Please write data in this format yyyy-mm-dd")
        self.label_2 = QtWidgets.QLabel(self.centralwidget)
        self.label_2.setGeometry(QtCore.QRect(400, -90, 251, 321))
        self.label_2.setStyleSheet("background-image: url(images-fotor-bg-remover-20230917104252.png);")
        self.label_2.setText("")
        self.label_2.setObjectName("label_2")
        self.label_4 = QtWidgets.QLabel(self.centralwidget)
        self.label_4.setGeometry(QtCore.QRect(76, 430, 441, 21))
        self.label_4.setStyleSheet("color: rgb(255, 0, 0);\n"
                                   "font: 75 12pt \"MS Shell Dlg 2\";")
        self.label_4.setObjectName("label_4")
        MainWindow.setCentralWidget(self.centralwidget)

        self.retranslateUi(MainWindow)
        QtCore.QMetaObject.connectSlotsByName(MainWindow)

    def retranslateUi(self, MainWindow):
        _translate = QtCore.QCoreApplication.translate
        MainWindow.setWindowTitle(_translate("MainWindow", "MainWindow"))
        self.label.setText(_translate("MainWindow", "Fill Your Excel Sheet :"))
        self.pushButton.setText(_translate("MainWindow", "Done"))
        self.label_3.setText(_translate("MainWindow", "Date to Delete:"))
        self.label_5.setText(_translate("MainWindow", "Folder Path:"))
        self.label_6.setText(_translate("MainWindow", "Stop Date :"))
        self.label_4.setText(_translate("MainWindow", ""))



if __name__ == "__main__":
    import sys
    app = QtWidgets.QApplication(sys.argv)

    MainWindow = QtWidgets.QMainWindow()
    ui = Ui_MainWindow()
    ui.setupUi(MainWindow)
    MainWindow.show()
    sys.exit(app.exec_())
